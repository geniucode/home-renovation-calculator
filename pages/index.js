import Head from "next/head";
import React, { useEffect } from "react";
import { questions } from "../data/questions";
import { dropdown, dropdownWithInputSpace, textInput, Yes } from "../enum/type";
import styles from "../styles/Home.module.css";
import Button from "@mui/material/Button";
import { useRecoilState } from "recoil";
import { questionState } from "../atoms/question.atom";
import DropDownList from "../component/dropDown";
import TextInput from "../component/textInput";
import DropdownWithInputSpace from "../component/dropdownWithInputSpace";
import { useRouter } from "next/router";

const components = {
  [dropdown]: (props) => <DropDownList {...props} />,
  [textInput]: (props) => <TextInput {...props} />,
  [dropdownWithInputSpace]: (props) => <DropdownWithInputSpace {...props} />,
};
export default function Home() {
  const router = useRouter();
  const [currentIndex, setCurrentindex] = React.useState(0);
  const [questionAtom, setQuestionAtom] = useRecoilState(questionState);
  const _renderDependencies = (question) => {
    const options = question.options;
    const array = [];
    for (let i = 0; i < options?.length; i++) {
      question[`${options[i]?.toLowerCase()}Dependencies`]?.length > 0 &&
        questionAtom[question.key] === options[i] &&
        question[`${options[i]?.toLowerCase()}Dependencies`].map((question) => {
          array.push(
            !!renderQuestion(question, 0, true) &&
              renderQuestion(question, 0, true)
          );
        });
    }
    return array;
  };
  const renderQuestion = (question, index, skip = false) => {
    if (question && (index === currentIndex || skip)) {
      const Component = components[question.componentType];
      return (
        <>
          <Component
            key={question.key}
            row={question}
            saveData={(value) => {
              const temp = { ...questionAtom };
              temp = {
                ...questionAtom,
                [question.key]: value,
              };
              // check(temp, currentStage);
              setQuestionAtom(temp);
            }}
            defaultValue={questionAtom[question.key]}
            {...question.componentProps}
          />
          {_renderDependencies(question)}
        </>
      );
    }
    return false;
  };
  const onClickNext = () => {
    setCurrentindex((prevState) => prevState + 1);
  };
  const onClickBack = () => {
    setCurrentindex((prevState) => prevState - 1);
  };
  const onClickShowResult = () => {
    router.push("/result");
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.stepContainer}>
        <div className={styles.headerStypsContainer}>
          <div className={styles.headerStyleTitle}>
            <div className={styles.stepsTitle}>
              Question : {questions[currentIndex].title}
            </div>
          </div>
          <progress
            className={styles.progress}
            id="file"
            value={(100 / questions?.length) * (currentIndex + 1)}
            max="100"
          ></progress>
        </div>
        <div className={styles.mainContainer}>
          {questions.map((question, index) => {
            return (
              !!renderQuestion(question, index) &&
              renderQuestion(question, index)
            );
          })}
          <div className={styles.btnContainer}>
            {currentIndex > 0 && (
              <Button onClick={onClickBack} variant="contained">
                Back
              </Button>
            )}
            {currentIndex !== questions.length - 1 && (
              <Button onClick={onClickNext} variant="contained">
                Next
              </Button>
            )}
            {currentIndex === questions.length - 1 && (
              <Button
                onClick={onClickShowResult}
                variant="contained"
              >
                Show result
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
